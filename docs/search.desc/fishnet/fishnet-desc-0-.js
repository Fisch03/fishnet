searchState.loadedDescShard("fishnet", 0, "fishnet is a opinionated, performant web framework for …\nA block of markup is a string that does not need to be …\nA page represents a visitable route on the website.\nA simple website builder. A Website consists of multiple …\nAdd a page to the website.\nmacro that lets you add components to the page.\nreusable components for building web pages (aka the main …\nmacro for creating a new component.\nEnable or disable compression for the website.\ndata structures for dealing with css\nmacro for generating a <code>StyleFragment</code> from css.\nReturns the argument unchanged.\nReturns the argument unchanged.\nmacro for generating <code>Markup</code> from html.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndata structures and functions for dealing with js\nCreate a new page.\nCreate a new website.\nStart serving the website on the given port.\nServe a directory as static files.\nAdd content to the page.\nmacro for creating a new component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncommonly used imports for building components.\nAdd state to the component. Since the state will be passed …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nExtractor and response for extensions.\nAn extension trait for <code>Future</code>s that provides a variety of …\nA block of markup is a string that does not need to be …\nAn asynchronous <code>Mutex</code>-like type.\nRepresents a type that can be rendered as HTML.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;T&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nmacro that lets you add components to the page.\nCatches unwinding panics while polling the future.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nCreates a new lock in an unlocked state ready for use.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nAttempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nEquality for two <code>Arc</code>s.\nFlatten the execution of this future when the output of …\nFlatten the execution of this future when the successful …\nReturns the argument unchanged.\nConverts an atomically reference-counted string slice into …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nAllocate a reference-counted slice and move <code>v</code>’s items …\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nReturns the argument unchanged.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nCreate an atomically reference-counted pointer from a …\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nMove a boxed object to a new, reference-counted allocation.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nFuse a future such that <code>poll</code> will never again be called …\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference into the given <code>Arc</code>, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDo something with the output of a future before passing it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the mutex, returning the underlying data.\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConvert this future into a single element stream.\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nWrap this future in an <code>Either</code> future, making it the …\nLocks this mutex, causing the current task to yield until …\nLocks this mutex, causing the current task to yield until …\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nMap this future’s output to a different type, returning …\nMap this future’s output to a different type, returning …\nInequality for two <code>Arc</code>s.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nCreates a new lock in an unlocked state ready for use.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nEvaluates and consumes the future, returning the resulting …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nTurn this future into a future that yields <code>()</code> on …\nRenders <code>self</code> as a block of <code>Markup</code>.\nAppends a representation of <code>self</code> to the given buffer.\nWrap this future in an <code>Either</code> future, making it the …\nRouting between <code>Service</code>s and handlers.\nCreate a cloneable handle to this future where all handles …\nGets the number of strong (<code>Arc</code>) pointers to this …\nChain on a computation for when a future finished, passing …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGets the number of <code>Weak</code> pointers to this allocation.\nMatch <code>DELETE</code> requests.\nMatch <code>GET</code> requests.\nMatch <code>HEAD</code> requests.\nA <code>MakeService</code> that produces axum router services.\nA filter that matches one or more HTTP methods.\nA <code>Service</code> that accepts requests based on a <code>MethodFilter</code> and\nMatch <code>OPTIONS</code> requests.\nMatch <code>PATCH</code> requests.\nMatch <code>POST</code> requests.\nMatch <code>PUT</code> requests.\nHow routes are stored inside a <code>Router</code>.\nThe router type for composing handlers and services.\nA <code>Router</code> converted into a borrowed <code>Service</code> with a fixed …\nA <code>Router</code> converted into an owned <code>Service</code> with a fixed body …\nMatch <code>TRACE</code> requests.\nRoute requests with the given handler regardless of the …\nRoute requests to the given service regardless of its …\nConvert the router into a borrowed <code>Service</code> with a fixed …\nRoute <code>DELETE</code> requests to the given handler.\nChain an additional handler that will only accept <code>DELETE</code> …\nRoute <code>DELETE</code> requests to the given service.\nChain an additional service that will only accept <code>DELETE</code> …\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback <code>Handler</code> to the router.\nAdd a fallback service to the router.\nAdd a fallback <code>Service</code> to the router.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuture types.\nRoute <code>GET</code> requests to the given handler.\nChain an additional handler that will only accept <code>GET</code> …\nRoute <code>GET</code> requests to the given service.\nChain an additional service that will only accept <code>GET</code> …\nApply a <code>HandleErrorLayer</code>.\nRoute <code>HEAD</code> requests to the given handler.\nChain an additional handler that will only accept <code>HEAD</code> …\nRoute <code>HEAD</code> requests to the given service.\nChain an additional service that will only accept <code>HEAD</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the router into a <code>MakeService</code>.\nConvert this router into a <code>MakeService</code>, that is a <code>Service</code> …\nConvert the router into a <code>MakeService</code> which stores …\nConvert this router into a <code>MakeService</code>, that will store <code>C</code>…\nConvert the router into an owned <code>Service</code> with a fixed …\nApply a <code>tower::Layer</code> to all routes in the router.\nApply a <code>tower::Layer</code> to all routes in the router.\nMerge two routers into one.\nMerge the paths and fallbacks of two routers into a single …\nRoute to services and handlers based on HTTP methods.\nNest a <code>Router</code> at some path.\nLike <code>nest</code>, but accepts an arbitrary <code>Service</code>.\nCreate a default <code>MethodRouter</code> that will respond with …\nCreate a new <code>Router</code>.\nRoute requests with the given method to the handler.\nChain an additional handler that will accept requests …\nRoute requests with the given method to the service.\nChain an additional service that will accept requests …\nRoute <code>OPTIONS</code> requests to the given handler.\nChain an additional handler that will only accept <code>OPTIONS</code> …\nRoute <code>OPTIONS</code> requests to the given service.\nChain an additional service that will only accept <code>OPTIONS</code> …\nPerforms the OR operation between the <code>MethodFilter</code> in <code>self</code> …\nRoute <code>PATCH</code> requests to the given handler.\nChain an additional handler that will only accept <code>PATCH</code> …\nRoute <code>PATCH</code> requests to the given service.\nChain an additional service that will only accept <code>PATCH</code> …\nRoute <code>POST</code> requests to the given handler.\nChain an additional handler that will only accept <code>POST</code> …\nRoute <code>POST</code> requests to the given service.\nChain an additional service that will only accept <code>POST</code> …\nRoute <code>PUT</code> requests to the given handler.\nChain an additional handler that will only accept <code>PUT</code> …\nRoute <code>PUT</code> requests to the given service.\nChain an additional service that will only accept <code>PUT</code> …\nAdd another route to the router.\nApply a <code>tower::Layer</code> to the router that will only run if …\nApply a <code>tower::Layer</code> to the router that will only run if …\nAdd another route to the router that calls a <code>Service</code>.\nRoute <code>TRACE</code> requests to the given handler.\nChain an additional handler that will only accept <code>TRACE</code> …\nRoute <code>TRACE</code> requests to the given service.\nChain an additional service that will only accept <code>TRACE</code> …\nProvide the state for the router.\nProvide the state for the router.\nA <code>RouteFuture</code> that always yields a <code>Response</code>.\nResponse future for <code>IntoMakeService</code>.\nResponse future for <code>Route</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Service</code> that accepts requests based on a <code>MethodFilter</code> and\nRoute requests with the given handler regardless of the …\nRoute requests to the given service regardless of its …\nRoute <code>DELETE</code> requests to the given handler.\nRoute <code>DELETE</code> requests to the given service.\nRoute <code>GET</code> requests to the given handler.\nRoute <code>GET</code> requests to the given service.\nRoute <code>HEAD</code> requests to the given handler.\nRoute <code>HEAD</code> requests to the given service.\nRoute requests with the given method to the handler.\nRoute requests with the given method to the service.\nRoute <code>OPTIONS</code> requests to the given handler.\nRoute <code>OPTIONS</code> requests to the given service.\nRoute <code>PATCH</code> requests to the given handler.\nRoute <code>PATCH</code> requests to the given service.\nRoute <code>POST</code> requests to the given handler.\nRoute <code>POST</code> requests to the given service.\nRoute <code>PUT</code> requests to the given handler.\nRoute <code>PUT</code> requests to the given service.\nRoute <code>TRACE</code> requests to the given handler.\nRoute <code>TRACE</code> requests to the given service.\na special type of string generated using the <code>css!</code> macro.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nconstruct a new <code>StyleFragment</code> using the given string.\nrender the <code>StyleFragment</code> relative to the passed in …\nan external script file.\nan inline script\nstring representation of a script\nsource of a javascript script\nconsume the <code>ScriptString</code>, returning the inner string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nminify the given <code>ScriptString</code>. this will also wrap it in …")